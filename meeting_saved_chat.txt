09:38:16 From Starta Institute 36 to Everyone:
	Напишите метод, который принимает две строки в аргументах, соединяет их и определяет реверсивный порядок, выведите результат на консоль.
	concatReversStr(String str1, String str2)
09:45:39 From Alina Miroshkina to Starta Institute 36(Direct Message):
	public class Main {		    public static void main(String[] args) {	        String str1 = "Hello";	        String str2 = "world!";	        	        concatReversStr(str1, str2);	    }		    public static void concatReversStr(String str1, String str2) {	                String combinedString = str1 + str2;		              StringBuilder reversedString = new StringBuilder(combinedString);	        reversedString.reverse();		  	        System.out.println("Результат: " + reversedString);	    }	}
09:45:49 From Oleksandr Drahin to Starta Institute 36(Direct Message):
	public static String concatReversStr(String str1, String str2){	    StringBuilder sb = new StringBuilder(str1 + str2);	    sb.reverse();	    return sb.toString();	}
09:46:55 From Starta Institute 36 to Everyone:
	public static String concatReversStr(String str1, String str2) {
	    StringBuilder str = new StringBuilder();
	    str.append(str1);
	    str.append(str2);
	    str.reverse();
	    return str.toString();
	}
09:47:24 From Starta Institute 36 to Everyone:
	Дан массив символов, объедините его и замените символ '?' на правильный символ, выведите результат на консоль.
	char[] arr = {'I', ' ', 'l', 'i', 'k', '?', ' ', 'J', 'a', 'v', 'a'};
09:52:50 From Oleksandr Drahin to Starta Institute 36(Direct Message):
	char[] arr = {'I', ' ', 'l', 'i', 'k', '?', ' ', 'J', 'a', 'v', 'a'};	StringBuilder sb = new StringBuilder();	sb.append(arr);	sb.replace(sb.indexOf("?"), sb.indexOf("?") + 1,"e");	System.out.println(sb);
09:56:56 From Oleksandr Drahin to Everyone:
	char[] arr = {'I', ' ', 'l', 'i', 'k', '?', ' ', 'J', 'a', 'v', 'a'};	StringBuilder sb = new StringBuilder();	sb.append(arr);	sb.replace(sb.indexOf("?"), sb.indexOf("?") + 1,"e");	System.out.println(sb);
10:06:33 From Starta Institute 36 to Everyone:
	StringBuilder query = new StringBuilder("SELECT c.brand, c.model, c.color, c.price FROM car c WHERE ");
	String parameter = "model";
	String value = "X6";
	query.append(parameter);
	query.append(" = ");
	query.append("\'" + value + "\'");
	
	System.out.println(query);
10:22:20 From Starta Institute 36 to Everyone:
	<dependencies>
	    <dependency>
	        <groupId>org.junit.jupiter</groupId>
	        <artifactId>junit-jupiter</artifactId>
	        <version>5.9.2</version>
	        <scope>test</scope>
	    </dependency>
	</dependencies>
10:27:37 From Nina Janeckova to Everyone:
	Unresolved plugin: 'org.apache.maven.plugins:maven-clean-plugin:3.2.0'
10:27:45 From Natalia Kolchenko to Everyone:
	+
10:28:09 From Alina Miroshkina to Starta Institute 36(Direct Message):
	+
10:39:46 From Dmytro Korol to Everyone:
	Windows рулит
10:41:23 From Anatolii Hololobov to Everyone:
	+
10:41:34 From Oleksandr Drahin to Everyone:
	+
10:41:36 From Eduard Bandurivskyi to Everyone:
	+
10:41:37 From Inna Degtiarova to Everyone:
	+
11:03:12 From Natalia Kolchenko to Everyone:
	public class Main {
	    public static void main(String[] args) {
	
	        System.out.println(Arrays.toString(getNumbers()));
	
	
	    }
	
	    public static int[] getNumbers(){
	        int[] arr = {1,2,3};
	        return arr;
	    }
	}
11:03:21 From Natalia Kolchenko to Everyone:
	@Test
	void getNumbersAssertEquals() {
	    int[] arr = {1,2,3};
	    assertEquals(arr, getNumbers());
	}
11:43:01 From Starta Institute 36 to Everyone:
	@BeforeAll
	    static void initBeforeAll() {
	        System.out.println("Befor");
	    }
	
	    @AfterAll
	    static void initAfterAll() {
	        System.out.println("After");
	    }
	
	    @BeforeEach
	    void initBeforeEach() {
	        System.out.println("Before Each");
	    }
	
	    @AfterEach
	    void initAfterEach() {
	        System.out.println("After Each");
	    }
	
	    @Test
	    void getNumbersAssertNotEqualsTest() {
	        int[] arr = {1, 2, 3};
	        assertNotEquals(arr, getNumbers());
	    }
	
	    @Test
	    void getNumbersAssertArrayEqualsTest() {
	        int[] arr = {1, 2, 3};
	        assertArrayEquals(arr, getNumbers());
	    }
	
	//    @Test
	//    void getNumbersCheckNullTest() {
	//        int[] arr = null;
	//        assertNull(arr);
	//    }
	
	    @Test
	    void getNumbersCheckNotNullTest() {
	        assertNotNull(getNumbers());
	    }
11:55:19 From Starta Institute 36 to Everyone:
	Написать метод findMax(), который возвращает максимальное число из массива
	Протестировать с помощью метода main()
	Написать тесты используя библиотеку JUnit
	тест, который проверяет пустой массив или нет
	тест, который проверяет правильность поиска максимального значения
12:27:26 From Starta Institute 36 to Everyone:
	@Test
	void findMaxNotEmptyResultTest() {
	    int[] arr = {0, -5, 7};
	    assertNotNull(findMax(arr));
	}
	
	@Test
	void findMaxExpectResultTest() {
	    int[] arr = {0, -5, 7};
	    int max = 7;
	    assertEquals(max, findMax(arr));
	}
	
	@Test
	void findMaxNotEmptyArrayTest() {
	    assertNotNull(new int[]{0, -5, 7});
	}
	
	@Test
	void findMaxEmptyArrayTest() {
	    int [] arr = null;
	    assertNull(arr);
	}
12:33:49 From Natalia Kolchenko to Everyone:
	@Test
	    void findMaxEmptyArrayTest() {
	        int[] arr = null;
	//        assertEquals(null,findMax(arr)); //либо/либо
	        assertNull(findMax(arr));
	    }
12:34:22 From Starta Institute 36 to Everyone:
	Проверка номера банковского счета
	Создайте метод isValidAccountNumber(String accountNumber),который возвращает true в случае успешной проверки.
	БС может содержать только 14 цифр
	Все 14 цифр не могут быть нулями
	Номер счета не может быть null или пустым.
	Проверьте с помощью метода main()
	Напишите тесты используя библиотеку JUnit
12:41:50 From Starta Institute 36 to Everyone:
	public static boolean isValidAccountNumber(String accountNumber) {
	    if (accountNumber == null || accountNumber.equalsIgnoreCase("")) {
	        return false;
	    }
	    if (accountNumber.length() == 14) {
	        int count = 0;
	        for (int i = 0; i < accountNumber.length(); i++) {
	            if (!Character.isDigit(accountNumber.charAt(i))) {
	                return false;
	            }
	            if (accountNumber.charAt(i) == '0') {
	                count += 1;
	            }
	        }
	        return count != 14;
	    } else {
	        return false;
	    }
	}
12:47:41 From Starta Institute 36 to Everyone:
	@Test
	void isValidAccountNumberNullTest() {
	    assertFalse(isValidAccountNumber(null));
	}
	
	@Test
	void isValidAccountNumberNotNullTest() {
	    assertTrue(isValidAccountNumber("01234567890000"));
	}
